# !/usr/bin/env Rscript
# ==============================================================================
# Spearman-based WGCNA for drosophila transcriptomic data
#
# Script by Gabriel Thornes
#
# Last Updated: 10/10/2025
#
# This script::
#   1. Takes VST subset datasets as input
#   2. Calculates Spearman rank correlations
#   3. Uses Spearman correlations as input to WGCNA
#   4. Generates plots and saves results
# ==============================================================================

#################################
##### Packages and Setup ########
#################################

source("src/utils/utils_io.R")

# Load required packages
library(WGCNA)
library(yaml)

# Allow multi-threading 
enableWGCNAThreads()

# Load configuration
config <- yaml::read_yaml("config/config.yaml")

# Options for the analysis
options(stringsAsFactors = FALSE)

# Create output directories if they don't exist  
dir.create(config$output_dirs$spearman_dir, recursive = TRUE, showWarnings = FALSE)

###############################
##### Data Loading ############
###############################

# Load subset data for VST control
data_file <- file.path(config$project_dirs$subset_data_dir, "VSTdataCtrl_subset.txt")
data <- read.table(data_file, header=TRUE, sep="\t", row.names=1)

# Transpose data for WGCNA format (samples as rows)
datExpr <- as.data.frame(t(data))

# Store original gene names before any filtering
original_gene_names <- colnames(datExpr)

# Check for genes and samples with too many missing values
gsg <- goodSamplesGenes(datExpr, verbose = 3)
if (!gsg$allOK) {
  # Remove the offending genes and samples
  datExpr <- datExpr[gsg$goodSamples, gsg$goodGenes]
  # Update the gene names list to match filtered data
  original_gene_names <- original_gene_names[gsg$goodGenes]
}

cat("Working with", nrow(datExpr), "samples and", ncol(datExpr), "genes\n")

#################################
##### Spearman Correlation ######
#################################

cat("\n=== SPEARMAN CORRELATION CALCULATION ===\n")

# Calculate Spearman correlation matrix
cat("Calculating Spearman correlation matrix...\n")
spearman_cor <- cor(datExpr, method = "spearman", use = "complete.obs")

# Save the correlation matrix
spearman_file <- file.path(config$output_dirs$spearman_dir, "spearman_correlation_matrix.RData")
save(spearman_cor, file = spearman_file)
cat("Spearman correlation matrix saved to:", spearman_file, "\n")

# Basic correlation statistics
cat("Correlation statistics:\n")
cat("Mean absolute correlation:", mean(abs(spearman_cor[upper.tri(spearman_cor)])), "\n")
cat("Median absolute correlation:", median(abs(spearman_cor[upper.tri(spearman_cor)])), "\n")

###############################
##### WGCNA on Spearman #######
###############################

cat("\n=== WGCNA USING SPEARMAN CORRELATIONS ===\n")

# Convert Spearman correlations to adjacency matrix
# Use absolute values and transform to adjacency
spearman_adj <- abs(spearman_cor)

# For WGCNA, we can use the correlation matrix directly as adjacency
# But we need to apply a transformation to emphasize strong correlations
# Use a power transformation similar to standard WGCNA
adjacency_power <- 6  # Start with power 6 for Spearman-based analysis
spearman_adjacency <- spearman_adj^adjacency_power

cat("Using adjacency power:", adjacency_power, "\n")
cat("Mean adjacency:", mean(spearman_adjacency[upper.tri(spearman_adjacency)]), "\n")

# Convert adjacency to topological overlap
cat("Calculating topological overlap...\n")
TOM <- TOMsimilarity(spearman_adjacency)
dissTOM <- 1 - TOM

# Hierarchical clustering
cat("Performing hierarchical clustering...\n")
geneTree <- hclust(as.dist(dissTOM), method = "average")

# Plot the dendrogram
pdf(file = file.path(config$output_dirs$spearman_dir, "spearman_gene_dendrogram.pdf"), width = 12, height = 8)
plot(geneTree, main = "Gene clustering based on Spearman correlations", 
     sub="", xlab="", cex = 0.6)
dev.off()

###############################
##### Module Construction #####
###############################

cat("\n=== MODULE IDENTIFICATION ===\n")

# Set the minimum module size
minModuleSize <- 30

# Module identification using dynamic tree cut
dynamicMods <- cutreeDynamic(dendro = geneTree, distM = dissTOM,
                            deepSplit = 2, pamRespectsDendro = FALSE,
                            minClusterSize = minModuleSize)

# Convert numeric labels into colors
dynamicColors <- labels2colors(dynamicMods)

cat("Initial modules identified:", length(unique(dynamicColors)), "\n")

# Calculate eigengenes for initial modules using original expression data
MEList <- moduleEigengenes(datExpr, colors = dynamicColors)
MEs <- MEList$eigengenes

# Calculate dissimilarity of module eigengenes using Spearman
MEDiss <- 1 - cor(MEs, method = "spearman")

# Cluster module eigengenes
METree <- hclust(as.dist(MEDiss), method = "average")

# Plot the result
pdf(file = file.path(config$output_dirs$spearman_dir, "spearman_module_eigengene_clustering.pdf"), width = 12, height = 8)
plot(METree, main = "Clustering of module eigengenes (Spearman-based)",
     xlab = "", sub = "")

# Set the merge threshold
MEDissThres <- 0.25
abline(h = MEDissThres, col = "red")
dev.off()

# Call an automatic merging function
merge <- mergeCloseModules(datExpr, dynamicColors, cutHeight = MEDissThres, verbose = 3)

# The merged module colors
mergedColors <- merge$colors
mergedMEs <- merge$newMEs

# Use the merged colors for subsequent analyses
moduleColors <- mergedColors

cat("Final modules after merging:", length(unique(moduleColors)), "\n")

# Plot comparison of original vs merged modules
pdf(file = file.path(config$output_dirs$spearman_dir, "spearman_module_comparison.pdf"), width = 12, height = 8)
plotDendroAndColors(geneTree, cbind(dynamicColors, mergedColors),
                   c("Dynamic Tree Cut", "Merged Modules"),
                   dendroLabels = FALSE, hang = 0.03,
                   addGuide = TRUE, guideHang = 0.05,
                   main = "Gene dendrogram and module colors (Spearman-based)")
dev.off()

#################################
##### Save Results ############
#################################

# Save the results
output_dir <- file.path(config$output_dirs$spearman_dir)

# Save all analysis objects
save(dynamicMods, dynamicColors, moduleColors, mergedMEs, geneTree, 
     spearman_cor, spearman_adjacency, TOM,
     file = file.path(output_dir, "spearman_wgcna_results.RData"))

# Create gene information data frame
geneInfo <- data.frame(
  Gene_ID = original_gene_names,
  Original_Module = dynamicColors,
  Final_Module = moduleColors
)

# Write gene module assignments
write.table(geneInfo, 
           file = file.path(output_dir, "spearman_gene_module_assignment.txt"),
           sep = "\t", row.names = FALSE, quote = FALSE)

#################################
##### Hub Gene Identification ###
#################################

cat("\n=== HUB GENE IDENTIFICATION ===\n")

uniqueModules <- unique(moduleColors)

# Print module summary
cat("Module summary:\n")
module_counts <- table(moduleColors)
print(module_counts)

# Find hub genes using pre-calculated Spearman correlations
cat("Identifying hub genes using pre-calculated correlations...\n")

hubGeneList <- sapply(uniqueModules, function(mod) {
  cat("Processing module:", mod, "\n")
  
  # Get genes in this module
  genes_in_module_indices <- which(moduleColors == mod)
  if(length(genes_in_module_indices) == 0) return(NA)
  
  # Get gene names for this module
  genes_in_module <- original_gene_names[genes_in_module_indices]
  
  # Extract the sub-correlation matrix for this module
  module_cor_matrix <- spearman_cor[genes_in_module, genes_in_module, drop = FALSE]
  
  # Calculate connectivity as sum of absolute correlations
  gene_connectivity <- rowSums(abs(module_cor_matrix)) - 1  # Subtract 1 to exclude self-correlation
  
  # Return gene with highest connectivity
  hub_gene_name <- names(gene_connectivity)[which.max(gene_connectivity)]
  
  return(hub_gene_name)
})

names(hubGeneList) <- uniqueModules
hubGeneList <- na.omit(hubGeneList)

hubGeneDF <- data.frame(
  Module = names(hubGeneList),
  Hub_Gene = as.character(hubGeneList)
)

# Save hub genes
write.table(hubGeneDF, 
           file = file.path(output_dir, "spearman_hub_genes.csv"),
           sep = ",", row.names = FALSE, quote = FALSE)

cat("\nSpearman-based WGCNA analysis complete!\n")
cat("Results saved to:", output_dir, "\n")